MEMORY {
    ZP:         start = $10,    size = $f0,   type = rw, file = "";
    SHORTRAM:   start = $0100,  size = $00c0, type = rw, file = "";
    STACK:      start = $01c0,  size = $0040, type = rw, file = "";
    OAM:        start = $0200,  size = $0100, type = rw, file = "";
    BUF:        start = $0300,  size = $0100, type = rw, file = "";
    RAM:        start = $0400,  size = $0400, type = rw, file = "";
    HDR:        start = $0000,  size = $0010, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_00:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_01:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_02:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_03:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_04:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_05:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_06:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_07:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_08:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_09:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_0a:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_0b:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_0c:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_0d:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    BANK_0e:         start = $8000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
    FIXED_BANK_0f:   start = $c000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00;
}

SEGMENTS {
    ZEROPAGE:     load = ZP,       type = zp;
    SHORTRAM:     load = SHORTRAM, type = bss;
    OAM:          load = OAM,      type = bss;
    BSS:          load = RAM,      type = bss;
    HEADER:       load = HDR,      type = ro;
    
    BANK_00: load = BANK_00, type = ro;
    BANK_01: load = BANK_01, type = ro, optional = yes;
    BANK_02: load = BANK_02, type = ro, optional = yes;
    BANK_03: load = BANK_03, type = ro, optional = yes;
    BANK_04: load = BANK_04, type = ro, optional = yes;
    BANK_05: load = BANK_05, type = ro, optional = yes;
    BANK_06: load = BANK_06, type = ro, optional = yes;
    BANK_07: load = BANK_07, type = ro, optional = yes;
    BANK_08: load = BANK_08, type = ro, optional = yes;
    BANK_09: load = BANK_09, type = ro, optional = yes;
    BANK_0a: load = BANK_0a, type = ro, optional = yes;
    BANK_0b: load = BANK_0b, type = ro, optional = yes;
    BANK_0c: load = BANK_0c, type = ro, optional = yes;
    BANK_0d: load = BANK_0d, type = ro, optional = yes;
    BANK_0e: load = BANK_0e, type = ro, optional = yes;
    BANK_0f: load = FIXED_BANK_0f, type = ro, optional = yes;
    
    PLAYBACK_CODE:  load = FIXED_BANK_0f,  type = rw, run = IRQCODE, define = yes;
    DECODE_UNROLL:  load = FIXED_BANK_0f,  type = ro, align = $100, optional = yes;
    DECODE:         load = FIXED_BANK_0f,  type = ro;
    DECODE_TABLES:  load = FIXED_BANK_0f,  type = ro, align = $100;
    MAIN:           load = FIXED_BANK_0f,  type = ro;
    HDRS:           load = FIXED_BANK_0f,  type = ro;
    INIT:           load = FIXED_BANK_0f,  type = ro;
    VECTORS:        load = FIXED_BANK_0f,  type = ro,  start = $FFFA;

}

SYMBOLS {
    INES_MAPPER:           type = weak, value = 2;    # UxROM
    NES2_SUBMAPPER:        type = weak, value = 2;    # submapper 2 - emulate bus conflicts
    INES_MIRROR:           type = weak, value = 0;    # 0 = horiz/mapper, 1 = vert
    NES2_BATTERY:          type = weak, value = 0;    # no battery-backed SRAM present
    INES_PRG_BANKS:        type = weak, value = 16;   # 16 * 16 = 256 KiB PRG
    INES_CHR_BANKS:        type = weak, value = 0;    #  8 * 0 = 0 KiB CHR
    NES2_PRG_RAM_SHIFT:    type = weak, value = 0;    # no PRG-RAM
    NES2_PRG_NVRAM_SHIFT:  type = weak, value = 0;    # no PRG-NVRAM
    NES2_CHR_RAM_SHIFT:    type = weak, value = 7;    # 64 << 7 = 8192 B CHR-RAM 
    NES2_CHR_NVRAM_SHIFT:  type = weak, value = 0;    # no CHR-NVRAM
    NES2_CPU_TIMING:       type = weak, value = 0;    # "NTSC NES" only
    
    MAPPER_UXROM:    type = weak, value = 1;
}
